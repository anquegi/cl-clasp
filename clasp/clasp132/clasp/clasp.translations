;; -*- Mode:Common-Lisp; Base:10 -*-
;;;; *-* Last-edit: Tuesday, July 20, 1993  12:08:13; Edited-By: carlson *-* 

;;; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;;; Copyright (c) 1990 - 1993 University of Massachusetts
;;; Department of Computer and Information Science
;;; Experimental Knowledge Systems Laboratory
;;; Professor Paul Cohen, Director.
;;; All rights reserved.
;;; 
;;; Permission to use, copy, modify and distribute this software and its
;;; documentation is hereby granted without fee, provided that the above
;;; copyright notice of EKSL, this paragraph and the one following appear
;;; in all copies and in supporting documentation.
;;; EKSL makes no representation about the suitability of this software for any
;;; purposes.  It is provided "AS IS", without express or implied warranties
;;; including (but not limited to) all implied warranties of merchantability
;;; and fitness for a particular purpose, and notwithstanding any other
;;; provision contained herein.  In no event shall EKSL be liable for any
;;; special, indirect or consequential damages whatsoever resulting from loss
;;; of use, data or profits, whether in an action of contract, negligence or
;;; other tortuous action, arising out of or in connection with the use or
;;; performance of this software, even if EKSL is
;;; advised of the possiblity of such damages.
;;; 
;;; For more information write to clasp-support@cs.umass.edu
;;; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

(in-package :user)

#+Explorer
(fs:add-logical-pathname-host
    "CLASP" (pathname-host sys::fdefine-file-pathname)
    `(("clasp"
       "" ,(append (pathname-directory sys::fdefine-file-pathname)
				 `(,*clasp-source-directory*)))
      ("source"
       "" ,(append (pathname-directory sys::fdefine-file-pathname)
				 `(,*clasp-source-directory*)))
      ("binary"
       "" ,(append (pathname-directory sys::fdefine-file-pathname)
				 `(,*clasp-source-directory* "EXPLORER-BINARIES")))
      ("interface"
       "" ,(append (pathname-directory sys::fdefine-file-pathname)
				 `(,*clasp-source-directory* "INTERFACE")))
      ("rtm"
       "" ,(append (pathname-directory sys::fdefine-file-pathname)
				 '("RTM")))
      ("scigraph"
       "" ,(append (butlast (pathname-directory sys::fdefine-file-pathname))
				 '("SCIGRAPH")))
      ("dwim"
       "" ,(append (butlast (pathname-directory sys::fdefine-file-pathname))
				 '("DWIM")))))
;;; (setf sys:*lisp-package* nil) ; to get around this
#+(and no-lucid-package-bullshit lcl4.1 logical-pathnames-mk)
(shadowing-import '(lp::logical-pathname-translations) 'common-lisp)

(defun dns (dir)
  (namestring (make-pathname :directory dir)))

#+(or (and lucid logical-pathnames-mk) allegro MCL lispworks)
(setf (#-(and lucid logical-pathnames-mk) logical-pathname-translations #+(and lucid logical-pathnames-mk) lp::logical-pathname-translations "clasp")
  `(("clasp;**;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   `(,*clasp-source-directory*
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    ("clasp;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   `(,*clasp-source-directory*))))
    ("source;**;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   `(,*clasp-source-directory*
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    ("source;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   `(,*clasp-source-directory*))))
    ("binary;**;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   `(,*clasp-source-directory*
		     #+lucid "lucid-binaries"
		     #+allegro "allegro-binaries"
		     #+(and allegro sparc) "sparc"
		     #+(and allegro mips) "mips"
		     #+lispworks "harlequin-binaries"
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    ("binary;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   `(,*clasp-source-directory*
		     #+lucid "lucid-binaries"
		     #+allegro "allegro-binaries"
		     #+(and allegro sparc) "sparc"
		     #+(and allegro mips) "mips"
		     #+lispworks "harlequin-binaries"
		     ))))
    ("interface;**;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   `(,*clasp-source-directory*
		     "interface"
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    ("interface;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   `(,*clasp-source-directory* "interface"))))
    ("rtm;**;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   '("rtm"
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    ("rtm;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   '("rtm"))))
    #-new-scigraph
    ("scigraph;**;*.*.*"
     ,(dns (append (butlast (pathname-directory (load-pathname)))
		   '("scigraph"
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    #-new-scigraph
    ("scigraph;*.*.*"
     ,(dns (append (butlast (pathname-directory (load-pathname)))
		   '("scigraph"))))
    #-new-scigraph
    ("dwim;**;*.*.*"
     ,(dns (append (butlast (pathname-directory (load-pathname)))
		   '("dwim"
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    #-new-scigraph
    ("dwim;*.*.*"
     ,(dns (append (butlast (pathname-directory (load-pathname)))
		   '("dwim"))))
    #+new-scigraph
    ("scigraph;**;*.*.*"
     ,(dns (append (butlast (pathname-directory (load-pathname)))
		   '("new-scigraph"
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    #+new-scigraph
    ("scigraph;*.*.*"
     ,(dns (append (butlast (pathname-directory (load-pathname)))
		   '("new-scigraph"))))
    #+new-scigraph
    ("dwim;**;*.*.*"
     ,(dns (append (butlast (pathname-directory (load-pathname)))
		   '("new-dwim"
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    #+new-scigraph
    ("dwim;*.*.*"
     ,(dns (append (butlast (pathname-directory (load-pathname)))
		   '("new-dwim"))))
    ("data;**;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   '("data"
		     #-(and lucid logical-pathnames-mk) :wild-inferiors
		     #+(and lucid logical-pathnames-mk) "**"))))
    ("data;*.*.*"
     ,(dns (append (pathname-directory (load-pathname))
		   '("data"))))
    )
  )

#+lispworks ;; Uses UPPERCASE to mean :COMMON case they way it should!
(setf (logical-pathname-translations "CLASP")
      `(("CLASP;**;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       `(,*clasp-source-directory*
		          #-(and lucid logical-pathnames-mk) :wild-inferiors
		          #+(and lucid logical-pathnames-mk) "**"))))
        ("CLASP;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       `(,*clasp-source-directory*))))
        ("SOURCE;**;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       `(,*clasp-source-directory*
		          #-(and lucid logical-pathnames-mk) :wild-inferiors
		          #+(and lucid logical-pathnames-mk) "**"))))
        ("SOURCE;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       `(,*clasp-source-directory*))))
        ("BINARY;**;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       `(,*clasp-source-directory*
			 "harlequin-binaries"
		          #-(and lucid logical-pathnames-mk) :wild-inferiors
		          #+(and lucid logical-pathnames-mk) "**"))))
        ("BINARY;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       `(,*clasp-source-directory*
		          "harlequin-binaries"
		          ))))
        ("INTERFACE;**;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       `(,*clasp-source-directory*
		          "interface"
		          #-(and lucid logical-pathnames-mk) :wild-inferiors
		          #+(and lucid logical-pathnames-mk) "**"))))
        ("INTERFACE;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       `(,*clasp-source-directory* "INTERFACE"))))
        ("RTM;**;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       '("rtm"
		         #-(and lucid logical-pathnames-mk) :wild-inferiors
		         #+(and lucid logical-pathnames-mk) "**"))))
        ("RTM;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       '("rtm"))))
        #-new-scigraph
        ("SCIGRAPH;**;*.*.*"
         ,(dns (append (butlast (pathname-directory (load-pathname)))
		       '("scigraph"
		         #-(and lucid logical-pathnames-mk) :wild-inferiors
		         #+(and lucid logical-pathnames-mk) "**"))))
        #-new-scigraph
        ("SCIGRAPH;*.*.*"
         ,(dns (append (butlast (pathname-directory (load-pathname)))
		       '("scigraph"))))
        #-new-scigraph
        ("DWIM;**;*.*.*"
         ,(dns (append (butlast (pathname-directory (load-pathname)))
		       '("dwim"
		         #-(and lucid logical-pathnames-mk) :wild-inferiors
		         #+(and lucid logical-pathnames-mk) "**"))))
        #-new-scigraph
        ("DWIM;*.*.*"
         ,(dns (append (butlast (pathname-directory (load-pathname)))
		       '("dwim"))))
        #+new-scigraph
        ("SCIGRAPH;**;*.*.*"
         ,(dns (append (butlast (pathname-directory (load-pathname)))
		       '("new-scigraph"
		         #-(and lucid logical-pathnames-mk) :wild-inferiors
		         #+(and lucid logical-pathnames-mk) "**"))))
        #+new-scigraph
        ("SCIGRAPH;*.*.*"
         ,(dns (append (butlast (pathname-directory (load-pathname)))
		       '("new-scigraph"))))
        #+new-scigraph
        ("DWIM;**;*.*.*"
         ,(dns (append (butlast (pathname-directory (load-pathname)))
		       '("new-dwim"
		         #-(and lucid logical-pathnames-mk) :wild-inferiors
		         #+(and lucid logical-pathnames-mk) "**"))))
        #+new-scigraph
        ("DWIM;*.*.*"
         ,(dns (append (butlast (pathname-directory (load-pathname)))
		       '("new-dwim"))))
        ("DATA;**;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       '("data"
		         #-(and lucid logical-pathnames-mk) :wild-inferiors
		         #+(and lucid logical-pathnames-mk) "**"))))
        ("DATA;*.*.*"
         ,(dns (append (pathname-directory (load-pathname))
		       '("data"))))
        )
      )

